{
  "name": "Sagui",
  "tagline": "Configuration-free modern frontend development",
  "body": "# Sagui\r\n\r\n[![Build Status](https://travis-ci.org/pirelenito/sagui.svg)](https://travis-ci.org/pirelenito/sagui)\r\n[![npm version](https://badge.fury.io/js/sagui.svg)](https://badge.fury.io/js/sagui)\r\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\r\n[![Code Climate](https://codeclimate.com/github/pirelenito/sagui/badges/gpa.svg)](https://codeclimate.com/github/pirelenito/sagui)\r\n\r\nSagui is **the single development dependency** that bundles [Webpack](http://webpack.github.io/), [Babel](http://babeljs.io/), [Karma](http://karma-runner.github.io/) and [Standard](http://standardjs.com/) in a hassle-free, easily updatable setup.\r\n\r\nIt follows an opinionated convention over configuration approach, providing a solid foundation so that you can focus on writing your code.\r\n\r\n## Get started!\r\n\r\nStart by creating a new folder to hold your project files:\r\n\r\n```bash\r\nmkdir my-project\r\ncd my-project\r\n```\r\n\r\nThen, create a [new NPM project](https://docs.npmjs.com/cli/init) (while at the project's folder):\r\n\r\n```bash\r\nnpm init -y\r\n```\r\n\r\n**Install Sagui locally** as a development dependency:\r\n\r\n```bash\r\nnpm install --save-dev sagui\r\n```\r\n\r\nAfter the install is completed, Sagui **bootstraps** its basic infrastructure, **no extra step is required**.\r\n\r\n```bash\r\n$ tree\r\n.\r\n├── .eslintrc\r\n├── .gitignore\r\n├── node_modules\r\n│   └── sagui\r\n├── package.json\r\n├── sagui.config.js\r\n└── src\r\n    ├── index.html\r\n    ├── index.js\r\n    ├── index.css\r\n    └── index.spec.js\r\n```\r\n\r\nFrom here on, you are ready to start development. You do that by **using common NPM run scripts**:\r\n\r\n```bash\r\nnpm start\r\n```\r\n\r\nTo run the tests, simply:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\nSagui manages the [package.json](https://docs.npmjs.com/files/package.json) scripts for you:\r\n\r\n- `npm run start`: spins a development server\r\n- `npm run test`: run the tests\r\n- `npm run test-watch` run a test watcher (great for development)\r\n- `npm run build`: build a development version of the project\r\n- `npm run dist`: build a production ready version of the project\r\n\r\nThen you can start writing your code inside the `src/` folder.\r\n\r\n## Features:\r\n\r\nSagui acts as a front-end to a bunch of amazing technology to keep your development environment always up to date:\r\n\r\n- [JavaScript 2015](http://babeljs.io/docs/learn-es2015/);\r\n- [CSS Modules](https://github.com/css-modules) or [Sass lang](http://sass-lang.com/);\r\n- [Webpack loaders](http://webpack.github.io/) for common media files\r\n- Automated testing with [Jasmine](http://jasmine.github.io/) and [Karma](http://karma-runner.github.io/);\r\n- Linting via [JavaScript Standard Style](http://standardjs.com/);\r\n- Live-reload with **hot module replacement** ([React components](https://github.com/gaearon/react-transform));\r\n\r\n## Configuration\r\n\r\nSagui supports two major project archetypes: **Pages** and **Library**.\r\n\r\nThey are not mutually exclusive, so it is possible to create a library project and use the pages archetype to create some demo pages for example.\r\n\r\n### Pages\r\n\r\nThis is a static application that can be built around multiple pages. Each page is the combination of an `html` and a `js` files.\r\n\r\n**It is the default bootstrapped configuration**, and it will build and serve a single page for your entire application based on the `src/index.js` and `src/index.html` files.\r\n\r\nTo change it and add more pages, you can add a custom configuration in the `sagui.config.js` file:\r\n\r\n```js\r\n/**\r\n * Sagui configuration object\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * Different application entry-points\r\n   * Each page is a combination of a JavaScript file and a HTML file\r\n   *\r\n   * Example: 'index' -> 'index.html' and 'index.js'\r\n   */\r\n  pages: ['index', 'about']\r\n}\r\n```\r\n\r\nAnd add additional `src/about.js` and `src/about.html` files for each page entry-point.\r\n\r\n### Library\r\n\r\nCreate reusable libraries that can be shared across applications. Sagui will take care of the build process so that external libraries are not bundled and that you have a CommonJS module as the output.\r\n\r\nTo get started, the only required configuration is the library name:\r\n\r\n```js\r\n/**\r\n * Sagui configuration object\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * Library name (usually in CammelCase)\r\n   * Example: ReactTransition, ReactRedux\r\n   */\r\n  library: 'ReactTransition'\r\n}\r\n```\r\n\r\n#### External dependencies\r\n\r\nSagui will use the the **peerDependencies** information in the project's `package.json` to determine what are the external dependencies of the library that shouldn't be bundled in the final build.\r\n\r\n## Advanced configuration\r\n\r\nWebpack and Karma have both very rich plugins ecosystems already, so it is no point trying to create a new ecosystem on top of them. Instead Sagui aims to provide a good set of default configurations that can be easily disabled or extended.\r\n\r\n### Disabling a default behavior\r\n\r\nThe internal architecture of Sagui is build around plugins, each providing a set of functionalities that can be used during any of Sagui's actions.\r\n\r\nIf you need to disable any default behavior, it is possible via:\r\n\r\n```js\r\n/**\r\n * Sagui configuration object\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * List of Sagui plugins to disable\r\n   */\r\n  disabledPlugins: ['webpack-scss']\r\n}\r\n```\r\n\r\nHere is the complete list of existing Sagui plugins:\r\n\r\n- **webpack-archetype-library**: Add support for the above *Library* configuration;\r\n- **webpack-archetype-pages**: Add support for the above *Pages* configuration;\r\n- **webpack-babel**: ES2015 support;\r\n- **webpack-base**: Base paths and webpack plugins;\r\n- **webpack-css-modules**: [CSS Modules](https://github.com/css-modules/css-modules) support;\r\n- **webpack-define-node-env**: Populates `process.env.NODE_ENV`;\r\n- **webpack-eslint**: ESLint support via [Standard](http://standardjs.com/);\r\n- **webpack-images** Images loading support (`jpg`, `jpeg`, `png`, `gif`);\r\n- **webpack-json**: JSON loader;\r\n- **webpack-scss**: SCSS support;\r\n- **webpack-videos**: Videos loading support (`ogg`, `mp4`).\r\n\r\n### <a name=\"custom-webpack-and-karma-config\"></a> Custom Webpack and Karma config\r\n\r\nTo overwrite and extend the default configuration you can use the same `saqui.config.js` file to specify your custom configurations:\r\n\r\n```js\r\n/**\r\n * Sagui configuration object\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * Webpack configuration object\r\n   * see: http://webpack.github.io/docs/configuration.html\r\n   *\r\n   * Will ovewrite and extend the default Sagui configuration\r\n   */\r\n  webpackConfig: {\r\n\r\n  },\r\n\r\n  /**\r\n   * Karma configuration object\r\n   * see: https://karma-runner.github.io/0.13/config/configuration-file.html\r\n   *\r\n   * Will overwrite and extend the default Sagui configuration\r\n   */\r\n  karmaConfig: {\r\n\r\n  }\r\n}\r\n```\r\n\r\nAs **an example**, lets add an extra loader to handle [Yaml](http://yaml.org/) files:\r\n\r\n```js\r\n/**\r\n * Sagui configuration object\r\n */\r\nmodule.exports = {\r\n  webpackConfig: {\r\n    module: {\r\n      loaders: [{\r\n        test: /\\.(yaml|yml)$/,\r\n        loader: 'json!yaml'\r\n      }]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nFor more information on how the merging of Webpack configurations work check [webpack-merge](https://github.com/survivejs/webpack-merge).\r\n\r\n## Contributing and development\r\n\r\nTo develop the tool locally, we will need to resort to a combination of a global [npm link](https://docs.npmjs.com/cli/link) and local links in projects.\r\n\r\nYou can start by linking Sagui globally. While at its folder:\r\n\r\n```bash\r\nnpm link\r\n```\r\n\r\nThe environment variable is to inform Sagui that it is working in a \"linked environment\".\r\n\r\nThen, **at the project you intend to use Sagui**, link it locally:\r\n\r\n```bash\r\nnpm link sagui\r\n```\r\n\r\nNow, the project is set to use your development copy of Sagui. Unfortunately, you will need to run any command in the project providing the environment variable `SAGUI_LINK`:\r\n\r\n```bash\r\nSAGUI_LINK=true npm start\r\n```\r\n",
  "google": "UA-75436789-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}